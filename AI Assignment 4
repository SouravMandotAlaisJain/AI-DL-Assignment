import heapq

# Define the directions for moving on the grid (up, down, left, right)
DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]

class Node:
    def __init__(self, position, parent=None):
        self.position = position  # (row, col) position on the grid
        self.parent = parent  # Parent node in the path
        self.g = 0  # Cost from start to the current node
        self.h = 0  # Heuristic cost estimate to the goal
        self.f = 0  # Total cost (f = g + h)
    
    def __eq__(self, other):
        return self.position == other.position
    
    def __lt__(self, other):
        return self.f < other.f  # Used for priority queue sorting

def heuristic(a, b):
    """Calculate the Manhattan distance heuristic."""
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star(grid, start, goal):
    """
    A* algorithm to find the shortest path on a grid.
    :param grid: 2D list representing the grid ('.' is walkable, '#' is obstacle)
    :param start: Tuple (row, col) for the start position
    :param goal: Tuple (row, col) for the goal position
    :return: List of tuples representing the path from start to goal, or None if no path found
    """
    open_list = []
    closed_set = set()
    
    # Start node
    start_node = Node(start)
    goal_node = Node(goal)
    
    # Add the start node to the open list
    heapq.heappush(open_list, start_node)
    
    while open_list:
        # Get the node with the lowest f value
        current_node = heapq.heappop(open_list)
        closed_set.add(current_node.position)
        
        # If we've reached the goal, reconstruct the path
        if current_node == goal_node:
            return reconstruct_path(current_node)
        
        # Explore neighbors (up, down, left, right)
        for direction in DIRECTIONS:
            neighbor_position = (current_node.position[0] + direction[0], current_node.position[1] + direction[1])
            
            # Check if the neighbor is within grid bounds
            if not (0 <= neighbor_position[0] < len(grid) and 0 <= neighbor_position[1] < len(grid[0])):
                continue
            
            # Check if the neighbor is an obstacle
            if grid[neighbor_position[0]][neighbor_position[1]] == '#':
                continue
            
            # Create a neighbor node
            neighbor_node = Node(neighbor_position, current_node)
            
            # If the neighbor is already in the closed set, skip it
            if neighbor_position in closed_set:
                continue
            
            # Calculate g, h, and f values
            neighbor_node.g = current_node.g + 1  # Assume cost between any two adjacent nodes is 1
            neighbor_node.h = heuristic(neighbor_node.position, goal_node.position)
            neighbor_node.f = neighbor_node.g + neighbor_node.h
            
            # Check if the neighbor is already in the open list with a lower f value
            if any(open_node for open_node in open_list if neighbor_node == open_node and neighbor_node.f >= open_node.f):
                continue
            
            # Add the neighbor to the open list
            heapq.heappush(open_list, neighbor_node)
    
    return None  # No path found

def reconstruct_path(current_node):
    """
    Reconstruct the path from start to goal by following parent pointers.
    :param current_node: The goal node (end of the path)
    :return: List of positions (row, col) representing the path
    """
    path = []
    while current_node:
        path.append(current_node.position)
        current_node = current_node.parent
    return path[::-1]  # Return reversed path (from start to goal)

# Example usage
grid = [
    ['.', '.', '.', '.', '.', '.'],
    ['.', '#', '#', '#', '.', '.'],
    ['.', '.', '.', '#', '.', '.'],
    ['.', '#', '.', '.', '.', '.'],
    ['.', '.', '.', '#', '#', '.'],
    ['.', '.', '.', '.', '.', '.']
]

start = (0, 0)  # Top-left corner
goal = (5, 5)  # Bottom-right corner

path = a_star(grid, start, goal)

# Print the result
if path:
    print("Path found:", path)
else:
    print("No path found.")
